#==============================================================================
#   This is used for building two versions of NetHack:
#
#   A Win32 Console version.
#   A Win32 Graphical version.
#
#   In addition to your C compiler,
#
#     if you want to change     you will need a
#     files with suffix         workalike for
#         .y                     yacc   (such as bison)
#         .l                     lex    (such as flex)
#
#==============================================================================
# BUILD DECISIONS SECTION
#
# There are currently only 2 decisions that you have to make.
#	1. Where do you want your build to end up?
#	2. Do you want debug information in the executable?
#
#==============================================================================
#
#---------------------------------------------------------------
# 1. Where do you want the game to be installed?
#

INSTALL_ROOT = $(BUILD_ROOT)/release

#
#---------------------------------------------------------------
# 2. Do you want debug information in the executable?
#

DEBUGINFO = Y

# This marks the end of the BUILD DECISIONS section.
#==============================================================================
#
#===============================================
#======= End of Modification Section ===========
#===============================================
#
################################################
#                                              #
# Nothing below here should have to be changed.#
#                                              #
################################################
NH_APP_NAME = NetHack Fourk
NH_BIN_NAME = nhfourk
NH_BUILD_VERSION = MinGW
NH_COMPANY = NetHack Fourk DevTeam
NH_COPYRIGHT = (c) Stichting Mathematisch Centrum, Amsterdam, 1985; Alex Smith 2010-2015; Daniel Thaler 2011-2012; and many others
NH_DESCRIPTION = Dungeon exploration game

#===============================================
# Source directories.
#===============================================

# Build files
BUILD_ROOT = ../../..
BUILD_INCL = $(BUILD_ROOT)/scripts/build/mingw
BUILD_SRC = $(BUILD_ROOT)/scripts/build/mingw

# NetHack files
NH_ROOT = $(BUILD_ROOT)/nethack
NH_INCL = $(BUILD_ROOT)/nethack/include
NH_SRC  = $(BUILD_ROOT)/nethack/src
NH_RC   = $(BUILD_ROOT)/nethack/rc
NH_DOC  = $(BUILD_ROOT)/doc

# NetHack Library files
LIB_NH_ROOT = $(BUILD_ROOT)/libnethack
LIB_NH_INCL = $(LIB_NH_ROOT)/include
LIB_NH_SRC  = $(LIB_NH_ROOT)/src
LIB_NH_DAT  = $(LIB_NH_ROOT)/dat
LIB_NH_UTIL = $(LIB_NH_ROOT)/util
# NetHack Library artifacts
LIB_NH_DLL_FILE = $(LIB_NH_ROOT)/libnethack.dll
LIB_NH_LIB_FILE = $(LIB_NH_ROOT)/libnethack.a

# NetHack Client Library files
LIB_CLIENT_ROOT = $(BUILD_ROOT)/libnethack_client
LIB_CLIENT_INCL = $(LIB_CLIENT_ROOT)/include
LIB_CLIENT_SRC  = $(LIB_CLIENT_ROOT)/src
# NetHack Client Library artifacts
LIB_CLIENT_DLL_FILE = $(LIB_CLIENT_ROOT)/libnethack_client.dll
LIB_CLIENT_LIB_FILE = $(LIB_CLIENT_ROOT)/libnethack_client.a

# NetHack Common Library files
LIB_COMMON_ROOT = $(BUILD_ROOT)/libnethack_common
LIB_COMMON_INCL = $(LIB_COMMON_ROOT)/include
LIB_COMMON_SRC  = $(LIB_COMMON_ROOT)/src
LIB_COMMON_DAT  = $(LIB_COMMON_ROOT)/dat

# Jansson Library files
LIB_JANSSON_ROOT = $(BUILD_ROOT)/libjansson
LIB_JANSSON_INCL = $(LIB_JANSSON_ROOT)
LIB_JANSSON_SRC  = $(LIB_JANSSON_ROOT)
# Jansson Library artifacts
LIB_JANSSON_DLL_FILE = $(LIB_JANSSON_SRC)/libjansson.dll
LIB_JANSSON_LIB_FILE = $(LIB_JANSSON_SRC)/libjansson.a

# Uncursed Library files
LIB_UNCURSED_ROOT = $(BUILD_ROOT)/libuncursed
LIB_UNCURSED_INCL = $(LIB_UNCURSED_ROOT)/include
LIB_UNCURSED_SRC  = $(LIB_UNCURSED_ROOT)/src
LIB_UNCURSED_DOC  = $(LIB_UNCURSED_ROOT)/doc
# Uncursed Library artifacts
LIB_UNCURSED_DLL_FILE = $(LIB_UNCURSED_ROOT)/libuncursed.dll
LIB_UNCURSED_LIB_FILE = $(LIB_UNCURSED_ROOT)/libuncursed.a
LIB_UNCURSED_SDL_DLL_FILE = $(LIB_UNCURSED_ROOT)/libuncursed_sdl.dll
LIB_UNCURSED_SDL_LIB_FILE = $(LIB_UNCURSED_ROOT)/libuncursed_sdl.a

# Tileset Compiler files
TILESETS_ROOT = $(BUILD_ROOT)/tilesets
TILESETS_INCL = $(TILESETS_ROOT)/include
TILESETS_SRC  = $(TILESETS_ROOT)/src
TILESETS_DAT  = $(TILESETS_ROOT)/dat
TILESETS_UTIL = $(TILESETS_ROOT)/util

#
#==========================================
# Source Compiler Info
#==========================================

OBJ   = o
OBJXX = obj

CC = i686-w64-mingw32-gcc
LD = i686-w64-mingw32-gcc
RC = i686-w64-mingw32-windres

CFLAGS = --std=gnu99
LDFLAGS = -static-libgcc
RCFLAGS = --output-format=coff -F pe-i386

ifeq "$(DEBUGINFO)" "Y"
	CXXFLAGS += -Og -g
	CFLAGS += -Og -g
else
	CXXFLAGS += -O2
	CFLAGS += -O2
endif

ifeq (,$(findstring -mingw,$(shell $(CC) -dumpmachine)))
	CFLAGS += -fPIC
	LDFLAGS += -fPIC
endif

override CXXFLAGS += -DNETCLIENT -D_REENTRANT -fvisibility=hidden
override CXXFLAGS += -Wall -Wextra -Wmissing-declarations
override CFLAGS += -DNETCLIENT -D_REENTRANT -DAIMAKE_NORETURN=_Noreturn -fno-common -fvisibility=hidden
override CFLAGS += -fdiagnostics-show-option -Wall -Wextra -Wno-missing-field-initializers -Wno-unused-parameter -Wno-sign-compare -Wold-style-definition -Wstrict-prototypes -Wmissing-prototypes -Wmissing-declarations -Wpointer-arith

#
#==========================================
# Level Compiler Info
#==========================================

YACC = bison -y
LEX  = flex -w

#
#==========================================
# Build contants
#==========================================

COMMA = ,
EMPTY =
SPACE = $(EMPTY) $(EMPTY)

#
#==========================================
# Builds
#==========================================
all: nethack archive tilesets
	@:

install: nethack_install archive_install tilesets_install doc_install save_install
	@:

clean: libjansson_clean libuncursed_clean libnethack_clean resources_clean defs_clean utils_clean levels_clean dungeon_clean archive_clean nethack_clean tilecompile_clean tilesets_clean
	@rm -f -r $(INSTALL_ROOT)/*

#
#==========================================
# Build Jansson Library
#==========================================
libjansson: $(LIB_JANSSON_DLL_FILE)
	@:

libjansson_install: libjansson
	@mkdir -p $(INSTALL_ROOT)
	@cp $(LIB_JANSSON_DLL_FILE) $(INSTALL_ROOT)

libjansson_clean:
	@rm -f $(LIB_JANSSON_SRC)/*.o
	@rm -f $(LIB_JANSSON_DLL_FILE) $(LIB_JANSSON_LIB_FILE)

$(LIB_JANSSON_SRC)/%.o: $(LIB_JANSSON_SRC)/%.c
	$(CC) -c $(CFLAGS) -o $@ -I $(LIB_JANSSON_INCL) -include $(BUILD_INCL)/_aimake.h $<

$(LIB_JANSSON_DLL_FILE): $(patsubst %.c,%.o,$(wildcard $(LIB_JANSSON_SRC)/*.c))
	$(CC) -shared $(LDFLAGS) -Wl,--out-implib,$(LIB_JANSSON_LIB_FILE) -o $@ $^

#
#==========================================
# Build Uncursed Library
#==========================================
libuncursed: $(LIB_UNCURSED_DLL_FILE) $(LIB_UNCURSED_SDL_DLL_FILE)
	@:

libuncursed_install: libuncursed
	@mkdir -p $(INSTALL_ROOT)
	@cp $(LIB_UNCURSED_DLL_FILE) $(INSTALL_ROOT)
	@cp $(LIB_UNCURSED_SDL_DLL_FILE) $(INSTALL_ROOT)

libuncursed_clean:
	@rm -f $(LIB_UNCURSED_SRC)/*.o
	@rm -f $(LIB_UNCURSED_SRC)/plugins/*.o
	@rm -f $(LIB_UNCURSED_SRC)/plugins/*.obj
	@rm -f $(LIB_UNCURSED_DLL_FILE) $(LIB_UNCURSED_LIB_FILE)
	@rm -f $(LIB_UNCURSED_SDL_DLL_FILE) $(LIB_UNCURSED_SDL_LIB_FILE)

$(LIB_UNCURSED_SRC)/%.o: $(LIB_UNCURSED_SRC)/%.c
	$(CC) -c $(CFLAGS) -o $@ -I $(LIB_UNCURSED_INCL) -include $(BUILD_INCL)/_aimake.h $<

$(LIB_UNCURSED_SRC)/plugins/sdl.o: $(LIB_UNCURSED_SRC)/plugins/sdl.c
	$(CC) -c $(CFLAGS) -DUNCURSED_MAIN_PROGRAM -o $@ -I $(LIB_UNCURSED_INCL) -include $(BUILD_INCL)/_aimake.h $^

$(LIB_UNCURSED_SRC)/plugins/sdl.obj: $(LIB_UNCURSED_SRC)/plugins/sdl.cxx
	$(CC) -c $(CXXFLAGS) -DUNCURSED_MAIN_PROGRAM -o $@ -I $(LIB_UNCURSED_INCL) -include $(BUILD_INCL)/_aimake.h $<

$(LIB_UNCURSED_SRC)/plugins/wincon.o: $(LIB_UNCURSED_SRC)/plugins/wincon.c
	$(CC) -c $(CFLAGS) -o $@ -I $(LIB_UNCURSED_INCL) -include $(BUILD_INCL)/_aimake.h $<

$(LIB_UNCURSED_SRC)/plugins/wincon.obj: $(LIB_UNCURSED_SRC)/plugins/wincon.cxx
	$(CC) -c $(CXXFLAGS) -o $@ -I $(LIB_UNCURSED_INCL) -include $(BUILD_INCL)/_aimake.h $<

$(LIB_UNCURSED_DLL_FILE): $(filter-out $(LIB_UNCURSED_SRC)/test_%.o,$(patsubst %.c,%.o,$(wildcard $(LIB_UNCURSED_SRC)/*.c))) $(LIB_UNCURSED_SRC)/plugins/wincon.o $(LIB_UNCURSED_SRC)/plugins/wincon.obj
	$(CC) -shared $(LDFLAGS) -Wl,--out-implib,$(LIB_UNCURSED_LIB_FILE) -o $@ $^

$(LIB_UNCURSED_SDL_DLL_FILE): $(filter-out $(LIB_UNCURSED_SRC)/test_%.o,$(patsubst %.c,%.o,$(wildcard $(LIB_UNCURSED_SRC)/*.c))) $(LIB_UNCURSED_SRC)/plugins/wincon.o $(LIB_UNCURSED_SRC)/plugins/wincon.obj $(LIB_UNCURSED_SRC)/plugins/sdl.o $(LIB_UNCURSED_SRC)/plugins/sdl.obj
	$(CC) -shared $(LDFLAGS) -Wl,--out-implib,$(LIB_UNCURSED_SDL_LIB_FILE) -o $@ $^ -Wl,-Bstatic -lpng -lz -lSDL2 -Wl,-Bdynamic -lgdi32 -limm32 -lole32 -loleaut32 -lversion -lwinmm -lws2_32

#
#==========================================
# Build NetHack Library
#==========================================
libnethack: artinames defs libjansson $(LIB_NH_DLL_FILE) $(LIB_CLIENT_DLL_FILE)
	@:

libnethack_install: libnethack libjansson_install
	@mkdir -p $(INSTALL_ROOT)
	@cp $(LIB_NH_DLL_FILE) $(INSTALL_ROOT)
	@cp $(LIB_CLIENT_DLL_FILE) $(INSTALL_ROOT)

libnethack_clean:
	@rm -f $(LIB_COMMON_SRC)/*.o
	@rm -f $(LIB_NH_SRC)/*.o
	@rm -f $(LIB_NH_DLL_FILE) $(LIB_NH_LIB_FILE)
	@rm -f $(LIB_CLIENT_SRC)/*.o
	@rm -f $(LIB_CLIENT_DLL_FILE) $(LIB_CLIENT_LIB_FILE)

$(LIB_COMMON_SRC)/%.o: $(LIB_COMMON_SRC)/%.c
	$(CC) -c $(CFLAGS) -o $@ -I $(LIB_COMMON_INCL) -I $(LIB_NH_INCL) -include $(BUILD_INCL)/_aimake.h $<

$(LIB_NH_SRC)/%.o: $(LIB_NH_SRC)/%.c
	$(CC) -c $(CFLAGS) -o $@ -I $(LIB_COMMON_INCL) -I $(LIB_NH_INCL) -include $(BUILD_INCL)/_aimake.h $<

$(LIB_CLIENT_SRC)/%.o: $(LIB_CLIENT_SRC)/%.c
	$(CC) -c -o $@ $(CFLAGS) -I $(LIB_COMMON_INCL) -I $(LIB_JANSSON_INCL) -I $(LIB_CLIENT_INCL) -include $(BUILD_INCL)/_aimake.h $<

$(LIB_NH_DLL_FILE): $(patsubst %.c,%.o,$(wildcard $(LIB_NH_SRC)/*.c)) $(patsubst %.c,%.o,$(wildcard $(LIB_COMMON_SRC)/*.c)) $(LIB_NH_SRC)/readonly.o
	$(CC) -shared $(LDFLAGS) -Wl,--out-implib,$(LIB_NH_LIB_FILE) -o $@ $^ -Wl,-Bstatic -lz -Wl,-Bdynamic -lws2_32

$(LIB_CLIENT_DLL_FILE): $(patsubst %.c,%.o,$(wildcard $(LIB_CLIENT_SRC)/*.c)) $(patsubst %.c,%.o,$(wildcard $(LIB_COMMON_SRC)/*.c))
	$(CC) -shared $(LDFLAGS) -Wl,--out-implib,$(LIB_CLIENT_LIB_FILE) -o $@ $^ -L $(LIB_JANSSON_ROOT) -L $(LIB_NH_ROOT) -Wl,-Bdynamic -ljansson -lnethack -lws2_32

#
#==========================================
# Build resources
#==========================================
resources: defs $(LIB_NH_DAT)/data $(LIB_NH_DAT)/dungeon.pdf $(LIB_NH_DAT)/oracles $(LIB_NH_DAT)/quest.dat $(LIB_NH_DAT)/rumors
	@:

resources_clean:
	@rm -f $(LIB_NH_DAT)/data
	@rm -f $(LIB_NH_DAT)/dungeon.pdf
	@rm -f $(LIB_NH_DAT)/oracles
	@rm -f $(LIB_NH_DAT)/quest.dat
	@rm -f $(LIB_NH_DAT)/rumors

$(LIB_NH_DAT)/data: $(LIB_NH_DAT)/data.base
	$(LIB_NH_ROOT)/makedefs.exe -d $< $@

$(LIB_NH_DAT)/dungeon.pdf: $(LIB_NH_DAT)/dungeon.def
	$(LIB_NH_ROOT)/makedefs.exe -e $< $@

$(LIB_NH_DAT)/oracles: $(LIB_NH_DAT)/oracles.txt
	$(LIB_NH_ROOT)/makedefs.exe -h $< $@

$(LIB_NH_DAT)/quest.dat: $(LIB_NH_DAT)/quest.txt
	$(LIB_NH_ROOT)/makedefs.exe -q $< $@

$(LIB_NH_DAT)/rumors: $(LIB_NH_DAT)/rumors.tru $(LIB_NH_DAT)/rumors.fal
	$(LIB_NH_ROOT)/makedefs.exe -r $^ $@

#
#==========================================
# Build definition files
#==========================================
defs: artinames $(LIB_NH_ROOT)/makedefs.exe $(LIB_NH_INCL)/date.h $(LIB_NH_INCL)/onames.h $(LIB_NH_INCL)/verinfo.h $(LIB_NH_INCL)/pm.h $(LIB_NH_SRC)/readonly.o
	@:

artinames: $(LIB_NH_INCL)/artinames.h

defs_clean:
	@rm -f $(LIB_NH_INCL)/artinames.h
	@rm -f $(LIB_NH_ROOT)/makedefs.exe
	@rm -f $(LIB_NH_INCL)/date.h
	@rm -f $(LIB_NH_INCL)/onames.h
	@rm -f $(LIB_NH_INCL)/verinfo.h
	@rm -f $(LIB_NH_INCL)/pm.h
	@rm -f $(LIB_NH_SRC)/readonly.c
	@rm -f $(LIB_NH_SRC)/readonly.o

$(LIB_NH_ROOT)/makedefs.exe: $(LIB_NH_UTIL)/makedefs.o $(LIB_NH_SRC)/objects.o $(LIB_NH_SRC)/monst.o
	$(CC) $(LDFLAGS) -o $@ $^

$(LIB_NH_INCL)/artinames.h: $(LIB_NH_INCL)/artilist.h
	$(CC) $(CFLAGS) -DARTINAMES_H -E -o $@ -include $(BUILD_INCL)/_aimake.h $<

$(LIB_NH_INCL)/date.h: $(LIB_NH_ROOT)/makedefs.exe
	$(LIB_NH_ROOT)/makedefs.exe -v $@ $(NH_BUILD_VERSION)

$(LIB_NH_INCL)/onames.h: $(LIB_NH_ROOT)/makedefs.exe
	$(LIB_NH_ROOT)/makedefs.exe -o $@

$(LIB_NH_INCL)/verinfo.h: $(LIB_NH_ROOT)/makedefs.exe
	$(LIB_NH_ROOT)/makedefs.exe -w $@

$(LIB_NH_INCL)/pm.h: $(LIB_NH_ROOT)/makedefs.exe
	$(LIB_NH_ROOT)/makedefs.exe -p $@

$(LIB_NH_SRC)/readonly.c: $(LIB_NH_ROOT)/makedefs.exe
	$(LIB_NH_ROOT)/makedefs.exe -m $@

$(LIB_NH_SRC)/readonly.o: $(LIB_NH_SRC)/readonly.c
	$(CC) -c $(CFLAGS) -o $@ -I $(LIB_COMMON_INCL) -I $(LIB_NH_INCL) -include $(BUILD_INCL)/_aimake.h $<

#
#==========================================
# Build utilities
#==========================================
utils: artinames defs $(LIB_NH_ROOT)/lev_main.exe $(LIB_NH_ROOT)/dgn_main.exe $(LIB_NH_ROOT)/dlb_main.exe
	@:

utils_clean:
	@rm -f $(LIB_NH_ROOT)/lev_main.exe
	@rm -f $(LIB_NH_ROOT)/dgn_main.exe
	@rm -f $(LIB_NH_ROOT)/dlb_main.exe
	@rm -f $(LIB_NH_UTIL)/*.o
	@rm -f $(LIB_NH_UTIL)/*.l.c
	@rm -f $(LIB_NH_UTIL)/*.y.c
	@rm -f $(patsubst %.y,%.h,$(wildcard $(LIB_NH_UTIL)/*.y))

$(LIB_NH_UTIL)/%.y.c: $(LIB_NH_UTIL)/%.y
	$(YACC) -o $@ --defines=$(patsubst %.y,%.h,$<) $<

$(LIB_NH_UTIL)/%.l.c: $(LIB_NH_UTIL)/%.l
	$(LEX) -o $@ $<

$(LIB_NH_UTIL)/%.y.o: $(LIB_NH_UTIL)/%.y.c
	$(CC) -c $(CFLAGS) -o $@ -I $(LIB_COMMON_INCL) -I $(LIB_NH_INCL) -include $(BUILD_INCL)/_aimake.h $<

$(LIB_NH_UTIL)/%.l.o: $(LIB_NH_UTIL)/%.l.c $(LIB_NH_UTIL)/%.y.c
	$(CC) -c $(CFLAGS) -o $@ -I $(LIB_COMMON_INCL) -I $(LIB_NH_INCL) -include $(BUILD_INCL)/_aimake.h $<

$(LIB_NH_UTIL)/%.o: $(LIB_NH_UTIL)/%.c
	$(CC) -c $(CFLAGS) -o $@ -I $(LIB_COMMON_INCL) -I $(LIB_NH_INCL) -include $(BUILD_INCL)/_aimake.h $<

$(LIB_NH_ROOT)/lev_main.exe: $(LIB_NH_UTIL)/lev_main.o $(LIB_NH_UTIL)/lev_comp.l.o $(LIB_NH_UTIL)/lev_comp.y.o $(LIB_NH_SRC)/readonly.o $(LIB_NH_SRC)/symclass.o $(LIB_NH_SRC)/objects.o $(LIB_NH_SRC)/monst.o
	$(CC) $(LDFLAGS) -o $@ $^

$(LIB_NH_ROOT)/dgn_main.exe: $(LIB_NH_UTIL)/dgn_main.o $(LIB_NH_UTIL)/dgn_comp.l.o $(LIB_NH_UTIL)/dgn_comp.y.o
	$(CC) $(LDFLAGS) -o $@ $^

$(LIB_NH_ROOT)/dlb_main.exe: $(LIB_NH_UTIL)/dlb_main.o $(LIB_NH_SRC)/dlb.o
	$(CC) $(LDFLAGS) -o $@ $^

#
#==========================================
# Build levels
#==========================================
levels: $(patsubst %.des,%.lev,$(wildcard $(LIB_NH_DAT)/*.des))
	@:

levels_clean:
	@rm -f $(LIB_NH_DAT)/*.lev

%.lev: $(LIB_NH_ROOT)/lev_main.exe
	$(LIB_NH_ROOT)/lev_main.exe -o $(LIB_NH_DAT)/ $(patsubst %.lev,%.des,$@)

#
#==========================================
# Build dungeon
#==========================================
dungeon: $(LIB_NH_DAT)/dungeon
	@:

dungeon_clean:
	@rm -f $(LIB_NH_DAT)/dungeon

$(LIB_NH_DAT)/dungeon: $(LIB_NH_DAT)/dungeon.pdf utils
	$(LIB_NH_ROOT)/dgn_main.exe $<

#
#==========================================
# Build archived data
#==========================================
archive: $(LIB_NH_DAT)/nhdat
	@:

archive_install: archive
	@mkdir -p $(INSTALL_ROOT)/data
	@cp $(LIB_NH_DAT)/nhdat $(INSTALL_ROOT)/data
	@cp $(LIB_NH_DAT)/license $(INSTALL_ROOT)/data

archive_clean:
	@rm -f $(LIB_NH_DAT)/nhdat

$(LIB_NH_DAT)/nhdat: utils dungeon resources levels
	cd $(LIB_NH_DAT) && $(abspath $(LIB_NH_ROOT)/dlb_main.exe) cf nhdat data dungeon history oracles quest.dat rumors *.lev

#
#==========================================
# Build NetHack
#==========================================
define NH_VERSION_FILE
#include <winresrc.h>
#include "nethack.h"
#include "verinfo.h"

1 ICON "$(BUILD_SRC)/icon.ico"

VS_VERSION_INFO VERSIONINFO
FILEVERSION     VERSION_MAJOR,VERSION_MINOR,PATCHLEVEL,0
PRODUCTVERSION  VERSION_MAJOR,VERSION_MINOR,PATCHLEVEL,0
FILEOS          VOS__WINDOWS32
FILETYPE        VFT_APP
FILESUBTYPE     VFT2_UNKNOWN
BEGIN
	BLOCK "StringFileInfo"
	BEGIN
		BLOCK "040904E4"
		BEGIN
			VALUE "CompanyName",      "$(NH_COMPANY)"
			VALUE "FileDescription",  "$(NH_DESCRIPTION) ($(1))"
			VALUE "LegalCopyright",   "$(NH_COPYRIGHT)"
			VALUE "ProductName",      "$(NH_APP_NAME) ($(2))"
			VALUE "ProductVersion",   VERSION_STRING
			VALUE "FileVersion",      VERSION_STRING
			VALUE "OriginalFilename", "$(NH_BIN_NAME)$(3).exe"
			VALUE "InternalName",     "$(NH_BIN_NAME)$(3).exe"
		END
	END
	BLOCK "VarFileInfo"
	BEGIN
		VALUE "Translation", 0x409, 1252
	END
END
endef

nethack: libnethack libuncursed $(NH_ROOT)/$(NH_BIN_NAME).exe $(NH_ROOT)/$(NH_BIN_NAME)-sdl.exe
	@:

nethack_install: nethack libnethack_install libuncursed_install
	@mkdir -p $(INSTALL_ROOT)
	@cp $(NH_ROOT)/$(NH_BIN_NAME).exe $(INSTALL_ROOT)
	@cp $(NH_ROOT)/$(NH_BIN_NAME)-sdl.exe $(INSTALL_ROOT)

nethack_clean:
	@rm -f $(BUILD_SRC)/*.o
	@rm -f $(BUILD_SRC)/*.rc
	@rm -f $(BUILD_SRC)/*.res
	@rm -f $(BUILD_SRC)/*.tmp
	@rm -f $(BUILD_SRC)/*.ico
	@rm -f $(NH_SRC)/*.o
	@rm -f $(NH_ROOT)/*.exe

$(BUILD_SRC)/icon.ico: $(wildcard $(BUILD_ROOT)/dist/common/icon*.png)
	icotool -c -o $@ $^

$(BUILD_SRC)/version_console.rc:
	$(file >$@,$(call NH_VERSION_FILE,text interface,console,))

$(BUILD_SRC)/version_console.res: $(BUILD_SRC)/version_console.rc $(BUILD_SRC)/icon.ico defs
	$(RC) $(RCFLAGS) -o $@ -I $(LIB_COMMON_INCL) -I $(LIB_NH_INCL) $<

$(BUILD_SRC)/version_gui.rc:
	$(file >$@,$(call NH_VERSION_FILE,graphical interface,GUI,-sdl))

$(BUILD_SRC)/version_gui.res: $(BUILD_SRC)/version_gui.rc $(BUILD_SRC)/icon.ico defs
	$(RC) $(RCFLAGS) -o $@ -I $(LIB_COMMON_INCL) -I $(LIB_NH_INCL) $<

$(NH_SRC)/%.o: $(NH_SRC)/%.c
	$(CC) -c $(CFLAGS) -o $@ -I $(NH_INCL) -I $(LIB_NH_INCL) -I $(LIB_COMMON_INCL) -I $(LIB_UNCURSED_INCL) -I $(TILESETS_INCL) -include $(BUILD_INCL)/_aimake.h $<

$(BUILD_SRC)/%.o: $(BUILD_SRC)/%.c
	$(CC) -c $(CFLAGS) -o $@ -include $(BUILD_INCL)/_aimake.h $<

$(NH_ROOT)/$(NH_BIN_NAME).exe: $(BUILD_SRC)/version_console.res $(patsubst %.c,%.o,$(wildcard $(NH_SRC)/*.c)) $(patsubst %.c,%.o,$(wildcard $(LIB_COMMON_SRC)/*.c)) $(patsubst %.c,%.o,$(wildcard $(BUILD_SRC)/*.c)) $(TILESETS_SRC)/tilesequence.o $(LIB_NH_SRC)/drawing.o $(LIB_NH_SRC)/symclass.o $(LIB_NH_SRC)/objects.o $(LIB_NH_SRC)/monst.o
	$(CC) $(LDFLAGS) -o $@ $^ -L $(LIB_UNCURSED_ROOT) -L $(LIB_NH_ROOT) -L $(LIB_CLIENT_ROOT) -Wl,-Bdynamic -lnethack -lnethack_client -luncursed -lws2_32

$(NH_ROOT)/$(NH_BIN_NAME)-sdl.exe: $(BUILD_SRC)/version_gui.res $(patsubst %.c,%.o,$(wildcard $(NH_SRC)/*.c)) $(patsubst %.c,%.o,$(wildcard $(LIB_COMMON_SRC)/*.c)) $(patsubst %.c,%.o,$(wildcard $(BUILD_SRC)/*.c)) $(TILESETS_SRC)/tilesequence.o $(LIB_NH_SRC)/drawing.o $(LIB_NH_SRC)/symclass.o $(LIB_NH_SRC)/objects.o $(LIB_NH_SRC)/monst.o
	$(CC) $(LDFLAGS) -o $@ $^ -L $(LIB_UNCURSED_ROOT) -L $(LIB_NH_ROOT) -L $(LIB_CLIENT_ROOT) -Wl,-Bdynamic -lnethack -lnethack_client -luncursed_sdl -lws2_32

#
#==========================================
# Build tileset compiler
#==========================================
tilecompile: libnethack $(TILESETS_ROOT)/tilecompile.exe $(TILESETS_ROOT)/basecchar.exe
	@:

tilecompile_clean:
	@rm -f $(TILESETS_SRC)/*.o
	@rm -f $(TILESETS_UTIL)/*.o
	@rm -f $(TILESETS_ROOT)/*.exe

$(TILESETS_SRC)/%.o: $(TILESETS_SRC)/%.c
	$(CC) -c $(CFLAGS) -o $@ -I $(TILESETS_INCL) -I $(NH_INCL) -I $(LIB_COMMON_INCL) -I $(LIB_NH_INCL) -include $(BUILD_INCL)/_aimake.h $<

$(TILESETS_UTIL)/%.o: $(TILESETS_UTIL)/%.c
	$(CC) -c $(CFLAGS) -o $@ -I $(TILESETS_INCL) -I $(NH_INCL) -I $(LIB_COMMON_INCL) -I $(LIB_NH_INCL) -include $(BUILD_INCL)/_aimake.h $<

$(TILESETS_ROOT)/basecchar.exe: $(TILESETS_UTIL)/basecchar.o $(filter-out %/netconnect.o,$(patsubst %.c,%.o,$(wildcard $(LIB_COMMON_SRC)/*.c))) $(TILESETS_SRC)/tilesequence.o $(NH_SRC)/brandings.o $(LIB_NH_SRC)/drawing.o $(LIB_NH_SRC)/objects.o $(LIB_NH_SRC)/symclass.o $(LIB_NH_SRC)/monst.o
	$(CC) $(LDFLAGS) -o $@ $^ -Wl,-Bstatic -lpng -lz

$(TILESETS_ROOT)/tilecompile.exe: $(filter-out %/basecchar.o,$(patsubst %.c,%.o,$(wildcard $(TILESETS_UTIL)/*.c))) $(filter-out %/netconnect.o,$(patsubst %.c,%.o,$(wildcard $(LIB_COMMON_SRC)/*.c))) $(TILESETS_SRC)/tilesequence.o $(NH_SRC)/brandings.o $(LIB_NH_SRC)/drawing.o $(LIB_NH_SRC)/objects.o $(LIB_NH_SRC)/symclass.o $(LIB_NH_SRC)/monst.o
	$(CC) $(LDFLAGS) -o $@ $^ -Wl,-Bstatic -lpng -lz

#
#==========================================
# Build tilesets
#==========================================
define GET_TILECOMPILE_ARGS_SCRIPT =
echo "-W -t nh4ct -n";
tail -n +2 "$(2)" | head -n 1;
echo "-z";
head -n 1 "$(2)";

PALETTE=$$(find $(1)/palettes -name `basename $(2) | rev | cut -d. -f2- | rev | cut -d- -f1`.txt);
if [ -f "$$PALETTE" ] && [ `basename $$PALETTE` != "slashem.txt" ]; then
	echo "-p $$PALETTE";
fi;

if [ -n "$$(echo `basename $(2)` | grep '^text')" ]; then
	echo "-W $(4)";
fi;

echo "-o $(3)";

tail -n +3 "$(2)" | while read -r line ; do
	if [ ! -z "$$line" ]; then
		find $(1) -name "$$line" -type f -not -path "*/catalogues/*";
	fi;
done;
endef

define GET_TILECOMPILE_ARGS =
	$(subst ',\',$(shell $(call GET_TILECOMPILE_ARGS_SCRIPT,$(1),$(2),$(3),$(4))))
endef

tilesets: tilecompile $(TILESETS_DAT)/fonts/font14.png $(TILESETS_DAT)/text/base.txt $(TILESETS_DAT)/palettes/dawnlike.txt $(subst /catalogues/,/,$(patsubst %.txt,%.nh4ct,$(wildcard $(TILESETS_DAT)/catalogues/*.txt)))
	@:

tilesets_install: tilesets
	@mkdir -p $(INSTALL_ROOT)/data
	@cp $(TILESETS_DAT)/fonts/*.png $(INSTALL_ROOT)/data
	@cp $(TILESETS_DAT)/*.nh4ct $(INSTALL_ROOT)/data

tilesets_clean:
	@rm -f $(TILESETS_DAT)/text/base.txt
	@rm -f $(TILESETS_DAT)/palettes/dawnlike.txt
	@rm -f $(TILESETS_DAT)/fonts/font14.png
	@rm -f $(TILESETS_DAT)/*.nh4ct

$(TILESETS_DAT)/text/base.txt:
	$(TILESETS_ROOT)/basecchar.exe -o $@

$(TILESETS_DAT)/palettes/dawnlike.txt:
	$(TILESETS_ROOT)/tilecompile.exe -t palette -o $(TILESETS_DAT)/palettes/dawnlike.txt $(TILESETS_DAT)/tiles/dawnlike-dragons.txt

$(TILESETS_DAT)/fonts/font14.png:
	$(TILESETS_ROOT)/tilecompile.exe -z 8 14 -b 0 0 0 -t image -u -o $(TILESETS_DAT)/fonts/font14.png $(TILESETS_DAT)/fonts/font14.txt

$(TILESETS_DAT)/%.nh4ct: $(TILESETS_DAT)/catalogues/%.txt $(TILESETS_DAT)/text/base.txt $(TILESETS_DAT)/palettes/dawnlike.txt
	$(TILESETS_ROOT)/tilecompile.exe $(call GET_TILECOMPILE_ARGS,$(TILESETS_DAT),$<,$@,$(TILESETS_DAT)/text/base.txt)

#
#==========================================
# Install misc files
#==========================================
doc_install:
	@mkdir -p $(INSTALL_ROOT)/doc
	@cp $(NH_DOC)/changelog*.txt $(INSTALL_ROOT)/doc
	@cp $(NH_DOC)/faq.txt $(INSTALL_ROOT)/doc
	@cp $(NH_DOC)/philosophy.txt $(INSTALL_ROOT)/doc
	@cp $(NH_DOC)/keyboard-layouts-nethack.png $(INSTALL_ROOT)/doc
	@asciidoc -o $(INSTALL_ROOT)/doc/guidebook.html $(NH_DOC)/guidebook.asc
	@pod2html --infile=$(NH_DOC)/$(NH_BIN_NAME).pod --outfile=$(INSTALL_ROOT)/doc/$(NH_BIN_NAME).html

define SAVE_README_FILE
This directory stores data shared between all users
When you play locally, your save files are stored in your home
directory (e.g. %APPDATA%/$(subst $(SPACE),,$(NH_APP_NAME))).
endef

save_install: $(INSTALL_ROOT)/save
	@touch $(INSTALL_ROOT)/save/logfile
	@touch $(INSTALL_ROOT)/save/xlogfile
	@touch $(INSTALL_ROOT)/save/livelog
	@touch $(INSTALL_ROOT)/save/paniclog
	@touch $(INSTALL_ROOT)/save/record
	$(file >$(INSTALL_ROOT)/save/README,$(SAVE_README_FILE))

$(INSTALL_ROOT)/save:
	@mkdir -p $(INSTALL_ROOT)/save
